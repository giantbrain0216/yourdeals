// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NPComplet.YourDeals.Server.Infrastructure.Repositories.Data;

#nullable disable

namespace NPComplet.YourDeals.Server.Infrastructure.Repositories.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220630113834_addPropser")]
    partial class addPropser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Accounting.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClientAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClientName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalApplicationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InternalCreationDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InternalIsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("InternalModificationDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("InternalUniqueNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("InternalValidation")
                        .HasColumnType("bit");

                    b.Property<string>("InvoicePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PrintDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ClientAddressId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PostId");

                    b.ToTable("INVOICES", "ACCOUNTING");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Accounting.Quotation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClientAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClientName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ClientSignatureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InternalApplicationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InternalCreationDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InternalIsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("InternalModificationDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("InternalUniqueNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("InternalValidation")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("InvoiceDuration")
                        .HasColumnType("time");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PrintDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ProposerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("QuotationPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("TermConditionPostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WarrantyPostId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ClientAddressId");

                    b.HasIndex("ClientSignatureId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PostId");

                    b.HasIndex("TermConditionPostId");

                    b.HasIndex("WarrantyPostId");

                    b.ToTable("QUOTATIONS", "ACCOUNTING");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Audit.Audit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AffectedColumns")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AuditTrails");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Communication.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CloseDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DealMessagesPostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalApplicationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InternalCreationDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InternalIsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("InternalModificationDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InternalValidation")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRevivedUserSeen")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MessageCoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PropositionMessagesPostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SendingTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ToUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DealMessagesPostId");

                    b.HasIndex("MessageCoreId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PropositionMessagesPostId");

                    b.HasIndex("ToUserId");

                    b.ToTable("MESSAGES", "COMMUNICATION");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Deal.Deal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DealDocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DealMessagesPostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DealPriceReferenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DealsFinanceOpertationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalApplicationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InternalCreationDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InternalIsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("InternalModificationDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InternalValidation")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDone")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MarketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("DealDocumentId");

                    b.HasIndex("DealMessagesPostId");

                    b.HasIndex("DealPriceReferenceId");

                    b.HasIndex("DealsFinanceOpertationId")
                        .IsUnique()
                        .HasFilter("[DealsFinanceOpertationId] IS NOT NULL");

                    b.HasIndex("MarketId");

                    b.HasIndex("OwnerId");

                    b.ToTable("DEALS", "DEAL");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Deal.DealDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalApplicationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InternalCreationDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InternalIsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("InternalModificationDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InternalValidation")
                        .HasColumnType("bit");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("DEALDOCUMENTS", "DEAL");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Deal.Proposition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalApplicationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InternalCreationDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InternalIsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("InternalModificationDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InternalValidation")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("PaymentManor")
                        .HasColumnType("int");

                    b.Property<Guid?>("PropositionAmountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PropositionMessagesPostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PropositionsFinanceOperationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PropositionAmountId");

                    b.HasIndex("PropositionMessagesPostId");

                    b.HasIndex("PropositionsFinanceOperationId")
                        .IsUnique()
                        .HasFilter("[PropositionsFinanceOperationId] IS NOT NULL");

                    b.ToTable("PROPOSITIONS", "DEAL");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Document.StoredFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Data")
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid?>("DealDocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileExtension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalApplicationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InternalCreationDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InternalIsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("InternalModificationDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InternalValidation")
                        .HasColumnType("bit");

                    b.Property<string>("LocalPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DealDocumentId");

                    b.HasIndex("OwnerId");

                    b.ToTable("STOREDFILES", "DOCUMENT");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Finance.DealsFinanceOpertation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalApplicationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InternalCreationDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InternalIsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("InternalModificationDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InternalValidation")
                        .HasColumnType("bit");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PostingDealPaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PostingDealPaymentId");

                    b.ToTable("DEALSFINANCEOPERATIONS", "FINANCE");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Finance.EarningsWallet.NPCompletEarningsWallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AmountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AvailableBlance")
                        .HasColumnType("decimal(15,2)");

                    b.Property<int>("CashFlow")
                        .HasColumnType("int");

                    b.Property<Guid?>("FinanceOperationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalApplicationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InternalCreationDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InternalIsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("InternalModificationDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InternalValidation")
                        .HasColumnType("bit");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AmountId");

                    b.HasIndex("FinanceOperationId");

                    b.HasIndex("OwnerId");

                    b.ToTable("NPCOMPLETEARNINGSWALLET", "FINANCE");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Finance.EarningsWallet.UserEarningsWallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AmountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AvailableBlance")
                        .HasColumnType("decimal(15,2)");

                    b.Property<int>("CashFlow")
                        .HasColumnType("int");

                    b.Property<Guid?>("FinanceOperationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalApplicationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InternalCreationDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InternalIsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("InternalModificationDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InternalValidation")
                        .HasColumnType("bit");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AmountId");

                    b.HasIndex("FinanceOperationId");

                    b.HasIndex("OwnerId");

                    b.ToTable("USEREARNINGSWALLET", "FINANCE");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Finance.FinanceOperation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AmountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FinanceOperationState")
                        .HasColumnType("int");

                    b.Property<int>("FinanceOperationType")
                        .HasColumnType("int");

                    b.Property<Guid?>("FinanceSupportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FinanceSupportName")
                        .HasColumnType("int");

                    b.Property<string>("InternalApplicationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InternalCreationDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InternalIsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("InternalModificationDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InternalValidation")
                        .HasColumnType("bit");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ParentFinanceOperationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceGatewayId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ServiceGatewayName")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AmountId");

                    b.HasIndex("FinanceSupportId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ParentFinanceOperationId");

                    b.HasIndex("ServiceGatewayId");

                    b.ToTable("FINANCEOPERATIONS", "FINANCE");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Finance.FinanceSettings.FeesTire", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalApplicationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InternalCreationDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InternalIsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("InternalModificationDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InternalValidation")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("FEESTIERS", "FINNACE");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Finance.FinanceSupport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AliasName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FinanceSupportName")
                        .HasColumnType("int");

                    b.Property<string>("InternalApplicationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InternalCreationDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InternalIsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("InternalModificationDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InternalValidation")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserPreferenceFinanceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("UserPreferenceFinanceId");

                    b.ToTable("FINANCESUPPORTS", "FINANCE");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Finance.PropositionsFinanceOperation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalApplicationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InternalCreationDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InternalIsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("InternalModificationDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InternalValidation")
                        .HasColumnType("bit");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("PROPOSITIONSFINANCEOPERATIONS", "FINANCE");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Finance.ServiceGateway", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalApplicationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InternalCreationDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InternalIsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("InternalModificationDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InternalValidation")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApplicationDefault")
                        .HasColumnType("bit");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ServiceGatewayName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("SERVICEGATEWAY", "FINANCE");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Finance.ServiceGateways.GateWayOperationPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalApplicationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InternalCreationDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InternalIsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("InternalModificationDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InternalValidation")
                        .HasColumnType("bit");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("GateWayOperationPayments", "FINANCE");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Finance.ServiceGateways.GateWayOperationPayout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalApplicationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InternalCreationDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InternalIsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("InternalModificationDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InternalValidation")
                        .HasColumnType("bit");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("GateWayOperationPayouts", "FINANCE");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Finance.ServiceGateways.GateWayOperationRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FinanceOperationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FiniancialOpreationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalApplicationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InternalCreationDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InternalIsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("InternalModificationDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InternalValidation")
                        .HasColumnType("bit");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FinanceOperationId");

                    b.HasIndex("OwnerId");

                    b.ToTable("GateWayOperationRequests", "FINANCE");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Finance.ServiceGateways.GateWayOperationResponse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FinanceOperationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FiniancialOpreationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalApplicationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InternalCreationDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InternalIsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("InternalModificationDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InternalValidation")
                        .HasColumnType("bit");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FinanceOperationId");

                    b.HasIndex("OwnerId");

                    b.ToTable("GateWayOperationResponses", "FINANCE");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Finance.UserPreferenceFinance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalApplicationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InternalCreationDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InternalIsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("InternalModificationDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InternalValidation")
                        .HasColumnType("bit");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("USERPREFERENCEFINANCE", "FINANCE");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Markets.Market", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalApplicationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InternalCreationDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InternalIsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("InternalModificationDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InternalValidation")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("MarketEndTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("MarketStartTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MarketsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("OpeningTimeSpan")
                        .HasColumnType("time");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MarketsId");

                    b.HasIndex("OwnerId");

                    b.ToTable("MARKETS", "MARKET");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Markets.Markets", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalApplicationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InternalCreationDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InternalIsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("InternalModificationDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InternalValidation")
                        .HasColumnType("bit");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("COLLECTION_MARKETS", "MARKET");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Monitoring.Log", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Exception")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalApplicationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InternalCreationDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InternalIsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("InternalModificationDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InternalValidation")
                        .HasColumnType("bit");

                    b.Property<string>("Level")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logger")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Thread")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("LOG", "MONITORING");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Pricing.Amount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AmountUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AmountValue")
                        .HasColumnType("decimal(15,2)");

                    b.Property<string>("InternalApplicationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InternalCreationDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InternalIsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("InternalModificationDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InternalValidation")
                        .HasColumnType("bit");

                    b.Property<Guid?>("InvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("QuotationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AmountUnitId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("QuotationId");

                    b.ToTable("AMOUNTS", "PRICING");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Pricing.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalApplicationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InternalCreationDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InternalIsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("InternalModificationDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InternalValidation")
                        .HasColumnType("bit");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("CURRENCIES", "PRICING");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Pricing.DealPaymentManor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DealPriceReferenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalApplicationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InternalCreationDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InternalIsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("InternalModificationDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InternalValidation")
                        .HasColumnType("bit");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PaymentManor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DealPriceReferenceId");

                    b.HasIndex("OwnerId");

                    b.ToTable("DEALPAYMENTMANORS", "PRICING");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Pricing.UnitPricing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CurrencyCodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalApplicationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InternalCreationDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InternalIsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("InternalModificationDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InternalValidation")
                        .HasColumnType("bit");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Taxes")
                        .HasColumnType("decimal(15,2)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyCodeId");

                    b.HasIndex("OwnerId");

                    b.ToTable("UNITPRICINGS", "PRICING");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Search.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DealId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalApplicationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InternalCreationDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InternalIsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("InternalModificationDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InternalValidation")
                        .HasColumnType("bit");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TagString")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DealId");

                    b.HasIndex("OwnerId");

                    b.ToTable("TAGS", "SEARCH");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Shared.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AddressType")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HouseNumber")
                        .HasColumnType("int");

                    b.Property<string>("InternalApplicationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InternalCreationDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InternalIsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("InternalModificationDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InternalValidation")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NumCountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneCountyCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("OwnerId");

                    b.ToTable("ADDRESSES", "SHARED");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Shared.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalApplicationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InternalCreationDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InternalIsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("InternalModificationDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InternalValidation")
                        .HasColumnType("bit");

                    b.Property<string>("LegalForm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TaxIdentifierNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("COMPANY", "SHARED");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Shared.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalApplicationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InternalCreationDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InternalIsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("InternalModificationDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InternalValidation")
                        .HasColumnType("bit");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Radius")
                        .HasColumnType("real");

                    b.Property<string>("StateCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("LOCATIONS", "SHARED");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Shared.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternalApplicationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InternalCreationDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InternalIsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("InternalModificationDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InternalValidation")
                        .HasColumnType("bit");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("POSTS", "SHARED");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Users.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InternalApplicationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InternalCreationDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InternalIsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("InternalModificationDateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<bool>("InternalValidation")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ProfileImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserPreferenceFinanceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ProfileImageId");

                    b.HasIndex("UserPreferenceFinanceId");

                    b.ToTable("PROFILES", "USER");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Users.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeletedAccount")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("OldEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ProfileId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Communication.DealMessagesPost", b =>
                {
                    b.HasBaseType("NPComplet.YourDeals.Domain.Shared.Shared.Post");

                    b.ToTable("DEALMESSAGESPOSTS", "DOCUMENTS");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Communication.PropositionMessagesPost", b =>
                {
                    b.HasBaseType("NPComplet.YourDeals.Domain.Shared.Shared.Post");

                    b.ToTable("PROPOSITIONMESSAGESPOSTS", "DOCUMENTS");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Deal.Offers.Offer", b =>
                {
                    b.HasBaseType("NPComplet.YourDeals.Domain.Shared.Deal.Deal");

                    b.Property<Guid?>("QuotationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("QuotationId");

                    b.ToTable("OFFERS", "DEAL");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Deal.Offers.PropositionOffer", b =>
                {
                    b.HasBaseType("NPComplet.YourDeals.Domain.Shared.Deal.Proposition");

                    b.Property<Guid?>("InvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OfferId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SelectedOfferId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("OfferId1");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("OfferId");

                    b.HasIndex("SelectedOfferId");

                    b.ToTable("PROPOSITIONOFFERS", "DEAL");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Deal.Requests.PropositionRequest", b =>
                {
                    b.HasBaseType("NPComplet.YourDeals.Domain.Shared.Deal.Proposition");

                    b.Property<Guid?>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("QuotationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RequestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SelectedRequestId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RequestId1");

                    b.HasIndex("DocumentId");

                    b.HasIndex("QuotationId");

                    b.HasIndex("RequestId");

                    b.HasIndex("SelectedRequestId");

                    b.ToTable("PROPOSITIONREQUESTS", "DEAL");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Deal.Requests.Request", b =>
                {
                    b.HasBaseType("NPComplet.YourDeals.Domain.Shared.Deal.Deal");

                    b.Property<Guid?>("InvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("InvoiceId");

                    b.ToTable("REQUESTS", "DEAL");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Finance.FinanceOperations.CashIn.CrossingPayout", b =>
                {
                    b.HasBaseType("NPComplet.YourDeals.Domain.Shared.Finance.FinanceOperation");

                    b.Property<Guid?>("DealsFinanceOpertationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PropositionsFinanceOperationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("DealsFinanceOpertationId");

                    b.HasIndex("PropositionsFinanceOperationId");

                    b.ToTable("CROSSINGPAYOUTS", "FINANCE");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Finance.FinanceOperations.Payments.CrossingPayment", b =>
                {
                    b.HasBaseType("NPComplet.YourDeals.Domain.Shared.Finance.FinanceOperation");

                    b.Property<Guid?>("DealId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DealType")
                        .HasColumnType("int");

                    b.Property<Guid?>("DealsFinanceOpertationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<Guid?>("PropositionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PropositionsFinanceOperationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("DealId");

                    b.HasIndex("DealsFinanceOpertationId");

                    b.HasIndex("PropositionId");

                    b.HasIndex("PropositionsFinanceOperationId");

                    b.ToTable("CROSSINGPAYMENTS", "FINANCE");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Finance.FinanceOperations.Payments.PostingDealPayment", b =>
                {
                    b.HasBaseType("NPComplet.YourDeals.Domain.Shared.Finance.FinanceOperation");

                    b.Property<Guid>("DealId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("DealId");

                    b.ToTable("POSTINGDEALPAYMENTS", "FINNACE");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Finance.FinanceSettings.Deal.DealFeesTier", b =>
                {
                    b.HasBaseType("NPComplet.YourDeals.Domain.Shared.Finance.FinanceSettings.FeesTire");

                    b.Property<decimal>("MoneyLimit")
                        .HasColumnType("decimal(15,2)");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("decimal(5,2)");

                    b.ToTable("DEALFEESTIERS", "FINNACE");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Finance.FinanceSettings.PostDeal.PostDealFeesTier", b =>
                {
                    b.HasBaseType("NPComplet.YourDeals.Domain.Shared.Finance.FinanceSettings.FeesTire");

                    b.Property<Guid?>("AmountId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("AmountId");

                    b.ToTable("POSTDEALFEESTIERS", "FINNACE");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Finance.FinanceSupports.BankAccount", b =>
                {
                    b.HasBaseType("NPComplet.YourDeals.Domain.Shared.Finance.FinanceSupport");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BIC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IBAN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstitutionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SortCode")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("BANKACCOUNTS", "FINANCE");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Finance.FinanceSupports.CreditCard", b =>
                {
                    b.HasBaseType("NPComplet.YourDeals.Domain.Shared.Finance.FinanceSupport");

                    b.Property<Guid?>("BillingAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CardHolderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Cvv2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExpirationDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExpireMonth")
                        .HasColumnType("int");

                    b.Property<int>("ExpireYear")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidUntilUtc")
                        .HasColumnType("datetime2");

                    b.HasIndex("BillingAddressId");

                    b.ToTable("CREDITCARDS", "FINANCE");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Finance.FinanceSupports.PayPalAccount", b =>
                {
                    b.HasBaseType("NPComplet.YourDeals.Domain.Shared.Finance.FinanceSupport");

                    b.Property<string>("PayPalMerchantID")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("PAYPALACCOUNT", "FINANCE");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Finance.ServiceGateways.Cybersource.CybersourceServiceGateway", b =>
                {
                    b.HasBaseType("NPComplet.YourDeals.Domain.Shared.Finance.ServiceGateway");

                    b.ToTable("CYBERSOURCESERVICEGATEWAY", "FINANCE");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Finance.ServiceGateways.Cybersource.Specifications.CybersourcePayment", b =>
                {
                    b.HasBaseType("NPComplet.YourDeals.Domain.Shared.Finance.ServiceGateways.GateWayOperationPayment");

                    b.Property<int>("FinanceGateWayOperationState")
                        .HasColumnType("int");

                    b.Property<Guid?>("FinanceOperationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("FinanceOperationId");

                    b.ToTable("CYBERSORUCEPAYMENTS", "FINANCE");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Finance.ServiceGateways.Cybersource.Specifications.CybersourcePaymentRequest", b =>
                {
                    b.HasBaseType("NPComplet.YourDeals.Domain.Shared.Finance.ServiceGateways.GateWayOperationRequest");

                    b.Property<Guid?>("BankAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CallState")
                        .HasColumnType("int");

                    b.Property<bool>("CaptureTrueForProcessPayment")
                        .HasColumnType("bit");

                    b.Property<Guid?>("CreditCardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CybersourcePaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("CreditCardId");

                    b.HasIndex("CybersourcePaymentId");

                    b.ToTable("CYBERSORUCEPAYMENTSREQUEST", "FINANCE");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Finance.ServiceGateways.Cybersource.Specifications.CybersourcePaymentResponse", b =>
                {
                    b.HasBaseType("NPComplet.YourDeals.Domain.Shared.Finance.ServiceGateways.GateWayOperationResponse");

                    b.Property<int>("CallState")
                        .HasColumnType("int");

                    b.Property<Guid?>("CybersourcePaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("CybersourcePaymentId");

                    b.ToTable("CYBERSORUCEPAYMENTSRESPONSE", "FINANCE");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Finance.ServiceGateways.Cybersource.Specifications.CybersourcePayout", b =>
                {
                    b.HasBaseType("NPComplet.YourDeals.Domain.Shared.Finance.ServiceGateways.GateWayOperationPayout");

                    b.Property<int>("FinanceGateWayOperationState")
                        .HasColumnType("int");

                    b.Property<Guid?>("FinanceOperationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FinanceOperationType")
                        .HasColumnType("int");

                    b.HasIndex("FinanceOperationId");

                    b.ToTable("CYBERSORUCEPAYOUTS", "FINANCE");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Finance.ServiceGateways.Cybersource.Specifications.CybersourcePayoutRequest", b =>
                {
                    b.HasBaseType("NPComplet.YourDeals.Domain.Shared.Finance.ServiceGateways.GateWayOperationRequest");

                    b.Property<Guid?>("BankAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CallState")
                        .HasColumnType("int");

                    b.Property<Guid?>("CreditCardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CybersourcePayoutId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("CreditCardId");

                    b.HasIndex("CybersourcePayoutId");

                    b.ToTable("CYBERSORUCEPAYOUTSREQUEST", "FINANCE");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Finance.ServiceGateways.Cybersource.Specifications.CybersourcePayoutResponse", b =>
                {
                    b.HasBaseType("NPComplet.YourDeals.Domain.Shared.Finance.ServiceGateways.GateWayOperationResponse");

                    b.Property<int>("CallState")
                        .HasColumnType("int");

                    b.Property<Guid?>("CybersourcePayoutId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("CybersourcePayoutId");

                    b.ToTable("CYBERSORUCEPAYOUTSRESPONSE", "FINANCE");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Pricing.DealPriceReference", b =>
                {
                    b.HasBaseType("NPComplet.YourDeals.Domain.Shared.Pricing.Amount");

                    b.ToTable("DEALPRICEREFERENCES", "PRICING");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Shared.Signature", b =>
                {
                    b.HasBaseType("NPComplet.YourDeals.Domain.Shared.Document.StoredFile");

                    b.ToTable("SIGNATURE", "SHARED");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Users.ProfileImage", b =>
                {
                    b.HasBaseType("NPComplet.YourDeals.Domain.Shared.Document.StoredFile");

                    b.ToTable("PROFILEIMAGES", "USER");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Accounting.Invoice", b =>
                {
                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Shared.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Shared.Address", "ClientAddress")
                        .WithMany()
                        .HasForeignKey("ClientAddressId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Shared.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Users.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Shared.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId");

                    b.Navigation("Address");

                    b.Navigation("ClientAddress");

                    b.Navigation("Company");

                    b.Navigation("Owner");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Accounting.Quotation", b =>
                {
                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Shared.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Shared.Address", "ClientAddress")
                        .WithMany()
                        .HasForeignKey("ClientAddressId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Shared.Signature", "ClientSignature")
                        .WithMany()
                        .HasForeignKey("ClientSignatureId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Shared.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Users.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Shared.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Shared.Post", "TermConditionPost")
                        .WithMany()
                        .HasForeignKey("TermConditionPostId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Shared.Post", "WarrantyPost")
                        .WithMany()
                        .HasForeignKey("WarrantyPostId");

                    b.Navigation("Address");

                    b.Navigation("ClientAddress");

                    b.Navigation("ClientSignature");

                    b.Navigation("Company");

                    b.Navigation("Owner");

                    b.Navigation("Post");

                    b.Navigation("TermConditionPost");

                    b.Navigation("WarrantyPost");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Communication.Message", b =>
                {
                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Communication.DealMessagesPost", null)
                        .WithMany("Messages")
                        .HasForeignKey("DealMessagesPostId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Shared.Post", "MessageCore")
                        .WithMany()
                        .HasForeignKey("MessageCoreId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Users.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Communication.PropositionMessagesPost", null)
                        .WithMany("Messages")
                        .HasForeignKey("PropositionMessagesPostId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Users.User", "ToUser")
                        .WithMany()
                        .HasForeignKey("ToUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MessageCore");

                    b.Navigation("Owner");

                    b.Navigation("ToUser");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Deal.Deal", b =>
                {
                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Shared.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Deal.DealDocument", "DealDocument")
                        .WithMany()
                        .HasForeignKey("DealDocumentId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Communication.DealMessagesPost", "DealMessagesPost")
                        .WithMany()
                        .HasForeignKey("DealMessagesPostId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Pricing.DealPriceReference", "DealPriceReference")
                        .WithMany()
                        .HasForeignKey("DealPriceReferenceId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Finance.DealsFinanceOpertation", "DealFinanceOpreation")
                        .WithOne("Deal")
                        .HasForeignKey("NPComplet.YourDeals.Domain.Shared.Deal.Deal", "DealsFinanceOpertationId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Markets.Market", null)
                        .WithMany("Deals")
                        .HasForeignKey("MarketId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Users.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Address");

                    b.Navigation("DealDocument");

                    b.Navigation("DealFinanceOpreation");

                    b.Navigation("DealMessagesPost");

                    b.Navigation("DealPriceReference");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Deal.DealDocument", b =>
                {
                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Users.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Deal.Proposition", b =>
                {
                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Users.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Pricing.Amount", "PropositionAmount")
                        .WithMany()
                        .HasForeignKey("PropositionAmountId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Communication.PropositionMessagesPost", "PropositionMessagesPost")
                        .WithMany()
                        .HasForeignKey("PropositionMessagesPostId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Finance.PropositionsFinanceOperation", "PropositionsFinanceOperation")
                        .WithOne("Propsosation")
                        .HasForeignKey("NPComplet.YourDeals.Domain.Shared.Deal.Proposition", "PropositionsFinanceOperationId");

                    b.Navigation("Owner");

                    b.Navigation("PropositionAmount");

                    b.Navigation("PropositionMessagesPost");

                    b.Navigation("PropositionsFinanceOperation");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Document.StoredFile", b =>
                {
                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Deal.DealDocument", null)
                        .WithMany("DealFiles")
                        .HasForeignKey("DealDocumentId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Users.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Finance.DealsFinanceOpertation", b =>
                {
                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Users.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Finance.FinanceOperations.Payments.PostingDealPayment", "PostingDealPayment")
                        .WithMany()
                        .HasForeignKey("PostingDealPaymentId");

                    b.Navigation("Owner");

                    b.Navigation("PostingDealPayment");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Finance.EarningsWallet.NPCompletEarningsWallet", b =>
                {
                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Pricing.Amount", "Amount")
                        .WithMany()
                        .HasForeignKey("AmountId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Finance.FinanceOperation", "FinanceOperation")
                        .WithMany()
                        .HasForeignKey("FinanceOperationId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Users.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Amount");

                    b.Navigation("FinanceOperation");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Finance.EarningsWallet.UserEarningsWallet", b =>
                {
                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Pricing.Amount", "Amount")
                        .WithMany()
                        .HasForeignKey("AmountId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Finance.FinanceOperation", "FinanceOperation")
                        .WithMany()
                        .HasForeignKey("FinanceOperationId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Users.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Amount");

                    b.Navigation("FinanceOperation");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Finance.FinanceOperation", b =>
                {
                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Pricing.Amount", "Amount")
                        .WithMany()
                        .HasForeignKey("AmountId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Finance.FinanceSupport", "FinanceSupport")
                        .WithMany()
                        .HasForeignKey("FinanceSupportId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Users.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Finance.FinanceOperation", "ParentFinanceOperation")
                        .WithMany()
                        .HasForeignKey("ParentFinanceOperationId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Finance.ServiceGateway", "ServiceGateway")
                        .WithMany()
                        .HasForeignKey("ServiceGatewayId");

                    b.Navigation("Amount");

                    b.Navigation("FinanceSupport");

                    b.Navigation("Owner");

                    b.Navigation("ParentFinanceOperation");

                    b.Navigation("ServiceGateway");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Finance.FinanceSettings.FeesTire", b =>
                {
                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Users.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Finance.FinanceSupport", b =>
                {
                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Users.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Finance.UserPreferenceFinance", null)
                        .WithMany("AllFinanceSupports")
                        .HasForeignKey("UserPreferenceFinanceId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Finance.PropositionsFinanceOperation", b =>
                {
                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Users.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Finance.ServiceGateway", b =>
                {
                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Users.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Finance.ServiceGateways.GateWayOperationPayment", b =>
                {
                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Users.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Finance.ServiceGateways.GateWayOperationPayout", b =>
                {
                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Users.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Finance.ServiceGateways.GateWayOperationRequest", b =>
                {
                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Finance.FinanceOperation", "FinanceOperation")
                        .WithMany()
                        .HasForeignKey("FinanceOperationId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Users.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("FinanceOperation");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Finance.ServiceGateways.GateWayOperationResponse", b =>
                {
                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Finance.FinanceOperation", "FinanceOperation")
                        .WithMany()
                        .HasForeignKey("FinanceOperationId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Users.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("FinanceOperation");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Finance.UserPreferenceFinance", b =>
                {
                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Users.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Markets.Market", b =>
                {
                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Markets.Markets", "Markets")
                        .WithMany("MarketsList")
                        .HasForeignKey("MarketsId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Users.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Markets");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Markets.Markets", b =>
                {
                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Users.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Monitoring.Log", b =>
                {
                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Users.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Pricing.Amount", b =>
                {
                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Pricing.UnitPricing", "AmountUnit")
                        .WithMany()
                        .HasForeignKey("AmountUnitId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Accounting.Invoice", null)
                        .WithMany("Amounts")
                        .HasForeignKey("InvoiceId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Users.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Accounting.Quotation", null)
                        .WithMany("Amounts")
                        .HasForeignKey("QuotationId");

                    b.Navigation("AmountUnit");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Pricing.Currency", b =>
                {
                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Users.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Pricing.DealPaymentManor", b =>
                {
                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Pricing.DealPriceReference", null)
                        .WithMany("PaymentManors")
                        .HasForeignKey("DealPriceReferenceId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Users.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Pricing.UnitPricing", b =>
                {
                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Pricing.Currency", "CurrencyCode")
                        .WithMany()
                        .HasForeignKey("CurrencyCodeId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Users.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("CurrencyCode");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Search.Tag", b =>
                {
                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Deal.Deal", null)
                        .WithMany("SearchTags")
                        .HasForeignKey("DealId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Users.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Shared.Address", b =>
                {
                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Shared.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Users.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Location");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Shared.Company", b =>
                {
                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Users.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Shared.Location", b =>
                {
                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Users.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Shared.Post", b =>
                {
                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Users.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Users.Profile", b =>
                {
                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Shared.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Users.ProfileImage", "ProfileImage")
                        .WithMany()
                        .HasForeignKey("ProfileImageId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Finance.UserPreferenceFinance", "UserPreferenceFinance")
                        .WithMany()
                        .HasForeignKey("UserPreferenceFinanceId");

                    b.Navigation("Address");

                    b.Navigation("ProfileImage");

                    b.Navigation("UserPreferenceFinance");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Users.User", b =>
                {
                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Users.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Communication.DealMessagesPost", b =>
                {
                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Shared.Post", null)
                        .WithOne()
                        .HasForeignKey("NPComplet.YourDeals.Domain.Shared.Communication.DealMessagesPost", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Communication.PropositionMessagesPost", b =>
                {
                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Shared.Post", null)
                        .WithOne()
                        .HasForeignKey("NPComplet.YourDeals.Domain.Shared.Communication.PropositionMessagesPost", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Deal.Offers.Offer", b =>
                {
                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Deal.Deal", null)
                        .WithOne()
                        .HasForeignKey("NPComplet.YourDeals.Domain.Shared.Deal.Offers.Offer", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Accounting.Quotation", "Quotation")
                        .WithMany()
                        .HasForeignKey("QuotationId");

                    b.Navigation("Quotation");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Deal.Offers.PropositionOffer", b =>
                {
                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Deal.Proposition", null)
                        .WithOne()
                        .HasForeignKey("NPComplet.YourDeals.Domain.Shared.Deal.Offers.PropositionOffer", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Accounting.Invoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Deal.Offers.Offer", "Offer")
                        .WithMany("Propositions")
                        .HasForeignKey("OfferId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Deal.Offers.Offer", "SelectedOffer")
                        .WithMany("SelectedPropositions")
                        .HasForeignKey("SelectedOfferId");

                    b.Navigation("Invoice");

                    b.Navigation("Offer");

                    b.Navigation("SelectedOffer");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Deal.Requests.PropositionRequest", b =>
                {
                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Deal.DealDocument", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Deal.Proposition", null)
                        .WithOne()
                        .HasForeignKey("NPComplet.YourDeals.Domain.Shared.Deal.Requests.PropositionRequest", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Accounting.Quotation", "Quotation")
                        .WithMany()
                        .HasForeignKey("QuotationId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Deal.Requests.Request", "Request")
                        .WithMany("Propositions")
                        .HasForeignKey("RequestId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Deal.Requests.Request", "SelectedRequest")
                        .WithMany("SelectedPropositions")
                        .HasForeignKey("SelectedRequestId");

                    b.Navigation("Document");

                    b.Navigation("Quotation");

                    b.Navigation("Request");

                    b.Navigation("SelectedRequest");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Deal.Requests.Request", b =>
                {
                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Deal.Deal", null)
                        .WithOne()
                        .HasForeignKey("NPComplet.YourDeals.Domain.Shared.Deal.Requests.Request", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Accounting.Invoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Finance.FinanceOperations.CashIn.CrossingPayout", b =>
                {
                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Finance.DealsFinanceOpertation", null)
                        .WithMany("DealPayoutFinanceOperations")
                        .HasForeignKey("DealsFinanceOpertationId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Finance.FinanceOperation", null)
                        .WithOne()
                        .HasForeignKey("NPComplet.YourDeals.Domain.Shared.Finance.FinanceOperations.CashIn.CrossingPayout", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Finance.PropositionsFinanceOperation", null)
                        .WithMany("CrossingPayoutFinanceOperations")
                        .HasForeignKey("PropositionsFinanceOperationId");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Finance.FinanceOperations.Payments.CrossingPayment", b =>
                {
                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Deal.Deal", "Deal")
                        .WithMany()
                        .HasForeignKey("DealId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Finance.DealsFinanceOpertation", null)
                        .WithMany("DealPaymentFinanceOperations")
                        .HasForeignKey("DealsFinanceOpertationId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Finance.FinanceOperation", null)
                        .WithOne()
                        .HasForeignKey("NPComplet.YourDeals.Domain.Shared.Finance.FinanceOperations.Payments.CrossingPayment", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Deal.Proposition", "Proposition")
                        .WithMany()
                        .HasForeignKey("PropositionId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Finance.PropositionsFinanceOperation", null)
                        .WithMany("CrossingPaymentFinanceOperations")
                        .HasForeignKey("PropositionsFinanceOperationId");

                    b.Navigation("Deal");

                    b.Navigation("Proposition");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Finance.FinanceOperations.Payments.PostingDealPayment", b =>
                {
                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Deal.Deal", "Deal")
                        .WithMany()
                        .HasForeignKey("DealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Finance.FinanceOperation", null)
                        .WithOne()
                        .HasForeignKey("NPComplet.YourDeals.Domain.Shared.Finance.FinanceOperations.Payments.PostingDealPayment", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Deal");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Finance.FinanceSettings.Deal.DealFeesTier", b =>
                {
                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Finance.FinanceSettings.FeesTire", null)
                        .WithOne()
                        .HasForeignKey("NPComplet.YourDeals.Domain.Shared.Finance.FinanceSettings.Deal.DealFeesTier", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Finance.FinanceSettings.PostDeal.PostDealFeesTier", b =>
                {
                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Pricing.Amount", "Amount")
                        .WithMany()
                        .HasForeignKey("AmountId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Finance.FinanceSettings.FeesTire", null)
                        .WithOne()
                        .HasForeignKey("NPComplet.YourDeals.Domain.Shared.Finance.FinanceSettings.PostDeal.PostDealFeesTier", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Amount");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Finance.FinanceSupports.BankAccount", b =>
                {
                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Finance.FinanceSupport", null)
                        .WithOne()
                        .HasForeignKey("NPComplet.YourDeals.Domain.Shared.Finance.FinanceSupports.BankAccount", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Finance.FinanceSupports.CreditCard", b =>
                {
                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Shared.Address", "BillingAddress")
                        .WithMany()
                        .HasForeignKey("BillingAddressId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Finance.FinanceSupport", null)
                        .WithOne()
                        .HasForeignKey("NPComplet.YourDeals.Domain.Shared.Finance.FinanceSupports.CreditCard", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("BillingAddress");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Finance.FinanceSupports.PayPalAccount", b =>
                {
                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Finance.FinanceSupport", null)
                        .WithOne()
                        .HasForeignKey("NPComplet.YourDeals.Domain.Shared.Finance.FinanceSupports.PayPalAccount", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Finance.ServiceGateways.Cybersource.CybersourceServiceGateway", b =>
                {
                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Finance.ServiceGateway", null)
                        .WithOne()
                        .HasForeignKey("NPComplet.YourDeals.Domain.Shared.Finance.ServiceGateways.Cybersource.CybersourceServiceGateway", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Finance.ServiceGateways.Cybersource.Specifications.CybersourcePayment", b =>
                {
                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Finance.FinanceOperation", "FinanceOperation")
                        .WithMany()
                        .HasForeignKey("FinanceOperationId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Finance.ServiceGateways.GateWayOperationPayment", null)
                        .WithOne()
                        .HasForeignKey("NPComplet.YourDeals.Domain.Shared.Finance.ServiceGateways.Cybersource.Specifications.CybersourcePayment", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("FinanceOperation");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Finance.ServiceGateways.Cybersource.Specifications.CybersourcePaymentRequest", b =>
                {
                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Finance.FinanceSupports.BankAccount", "BankAccount")
                        .WithMany()
                        .HasForeignKey("BankAccountId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Finance.FinanceSupports.CreditCard", "CreditCard")
                        .WithMany()
                        .HasForeignKey("CreditCardId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Finance.ServiceGateways.Cybersource.Specifications.CybersourcePayment", null)
                        .WithMany("CybersourcePaymentsRequests")
                        .HasForeignKey("CybersourcePaymentId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Finance.ServiceGateways.GateWayOperationRequest", null)
                        .WithOne()
                        .HasForeignKey("NPComplet.YourDeals.Domain.Shared.Finance.ServiceGateways.Cybersource.Specifications.CybersourcePaymentRequest", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("BankAccount");

                    b.Navigation("CreditCard");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Finance.ServiceGateways.Cybersource.Specifications.CybersourcePaymentResponse", b =>
                {
                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Finance.ServiceGateways.Cybersource.Specifications.CybersourcePayment", null)
                        .WithMany("CybersourcePaymentsResponses")
                        .HasForeignKey("CybersourcePaymentId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Finance.ServiceGateways.GateWayOperationResponse", null)
                        .WithOne()
                        .HasForeignKey("NPComplet.YourDeals.Domain.Shared.Finance.ServiceGateways.Cybersource.Specifications.CybersourcePaymentResponse", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Finance.ServiceGateways.Cybersource.Specifications.CybersourcePayout", b =>
                {
                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Finance.FinanceOperation", "FinanceOperation")
                        .WithMany()
                        .HasForeignKey("FinanceOperationId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Finance.ServiceGateways.GateWayOperationPayout", null)
                        .WithOne()
                        .HasForeignKey("NPComplet.YourDeals.Domain.Shared.Finance.ServiceGateways.Cybersource.Specifications.CybersourcePayout", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("FinanceOperation");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Finance.ServiceGateways.Cybersource.Specifications.CybersourcePayoutRequest", b =>
                {
                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Finance.FinanceSupports.BankAccount", "BankAccount")
                        .WithMany()
                        .HasForeignKey("BankAccountId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Finance.FinanceSupports.CreditCard", "CreditCard")
                        .WithMany()
                        .HasForeignKey("CreditCardId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Finance.ServiceGateways.Cybersource.Specifications.CybersourcePayout", null)
                        .WithMany("CybersourcePayoutsRequests")
                        .HasForeignKey("CybersourcePayoutId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Finance.ServiceGateways.GateWayOperationRequest", null)
                        .WithOne()
                        .HasForeignKey("NPComplet.YourDeals.Domain.Shared.Finance.ServiceGateways.Cybersource.Specifications.CybersourcePayoutRequest", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("BankAccount");

                    b.Navigation("CreditCard");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Finance.ServiceGateways.Cybersource.Specifications.CybersourcePayoutResponse", b =>
                {
                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Finance.ServiceGateways.Cybersource.Specifications.CybersourcePayout", null)
                        .WithMany("CybersourcePayoutsResponses")
                        .HasForeignKey("CybersourcePayoutId");

                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Finance.ServiceGateways.GateWayOperationResponse", null)
                        .WithOne()
                        .HasForeignKey("NPComplet.YourDeals.Domain.Shared.Finance.ServiceGateways.Cybersource.Specifications.CybersourcePayoutResponse", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Pricing.DealPriceReference", b =>
                {
                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Pricing.Amount", null)
                        .WithOne()
                        .HasForeignKey("NPComplet.YourDeals.Domain.Shared.Pricing.DealPriceReference", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Shared.Signature", b =>
                {
                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Document.StoredFile", null)
                        .WithOne()
                        .HasForeignKey("NPComplet.YourDeals.Domain.Shared.Shared.Signature", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Users.ProfileImage", b =>
                {
                    b.HasOne("NPComplet.YourDeals.Domain.Shared.Document.StoredFile", null)
                        .WithOne()
                        .HasForeignKey("NPComplet.YourDeals.Domain.Shared.Users.ProfileImage", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Accounting.Invoice", b =>
                {
                    b.Navigation("Amounts");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Accounting.Quotation", b =>
                {
                    b.Navigation("Amounts");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Deal.Deal", b =>
                {
                    b.Navigation("SearchTags");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Deal.DealDocument", b =>
                {
                    b.Navigation("DealFiles");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Finance.DealsFinanceOpertation", b =>
                {
                    b.Navigation("Deal");

                    b.Navigation("DealPaymentFinanceOperations");

                    b.Navigation("DealPayoutFinanceOperations");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Finance.PropositionsFinanceOperation", b =>
                {
                    b.Navigation("CrossingPaymentFinanceOperations");

                    b.Navigation("CrossingPayoutFinanceOperations");

                    b.Navigation("Propsosation");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Finance.UserPreferenceFinance", b =>
                {
                    b.Navigation("AllFinanceSupports");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Markets.Market", b =>
                {
                    b.Navigation("Deals");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Markets.Markets", b =>
                {
                    b.Navigation("MarketsList");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Communication.DealMessagesPost", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Communication.PropositionMessagesPost", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Deal.Offers.Offer", b =>
                {
                    b.Navigation("Propositions");

                    b.Navigation("SelectedPropositions");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Deal.Requests.Request", b =>
                {
                    b.Navigation("Propositions");

                    b.Navigation("SelectedPropositions");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Finance.ServiceGateways.Cybersource.Specifications.CybersourcePayment", b =>
                {
                    b.Navigation("CybersourcePaymentsRequests");

                    b.Navigation("CybersourcePaymentsResponses");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Finance.ServiceGateways.Cybersource.Specifications.CybersourcePayout", b =>
                {
                    b.Navigation("CybersourcePayoutsRequests");

                    b.Navigation("CybersourcePayoutsResponses");
                });

            modelBuilder.Entity("NPComplet.YourDeals.Domain.Shared.Pricing.DealPriceReference", b =>
                {
                    b.Navigation("PaymentManors");
                });
#pragma warning restore 612, 618
        }
    }
}
